EAI_test_effect = {

	log = "=============== test ==============="

	###

	2 = {
		set_temp_variable = { _project_building_type = global.EAI_PC_AIR }
		# set_temp_variable = { _project_replace_shared = 1 }
		set_temp_variable = { _project_build_for_ally = 1 }
		set_temp_variable = { _project_type_id = 0 }
		set_temp_variable = { _project_priority = 1000 }
		set_temp_variable = { _project_queue_num = 1 }
		EAI_PC_start_project = yes 
	}

	###

	if = {
		limit = {
			always = no
		}

		log = "EAI_test_effect = YES"
	}
	else = {
		log = "EAI_test_effect = NO"
	}

	log = "=============== end test ==============="
}

EAI_test_daily = {

	if = { limit = { has_country_flag = EAI_test_daily_logging }

		EAI_purge_debug = yes
		EAI_mefo_debug = yes
	}
}

EAI_purge_debug = {

	if = { limit = { tag = SOV }
	
		if = {
			limit = {
				NOT = { has_country_flag = SOV_civil_war_triggered_flag } # check if Civil war has been triggered first TODO_THOMAS: remove if not using paranoia
				has_country_flag = SOV_paranoia_system_active_flag
			}
			
			log = "SOV_paranoia=[?SOV_paranoia] paranoia_weekly_bucket=[?SOV_paranoia_weekly_bucket]"
		
			if = {
				limit = {
					set_temp_variable = { SOV_temp_paranoia_days = SOV_medium_paranoia_days }
					add_to_temp_variable = { SOV_temp_paranoia_days = SOV_high_paranoia_days }
					check_variable = { SOV_temp_paranoia_days > 3 }
					NOT = { has_country_flag = SOV_paranoia_conducting_inspection_flag } #Don't trigger a random purge if one is already going to be triggered from decision
					SOV_paranoia_is_finishing_purge_focus = no #Don't trigger a random purge if one is already going to be triggered from focus
					NOT = { has_country_flag = SOV_paranoia_random_purge_cooldown_from_focus_flag } #Wait 15 days after a purge has been triggered from focus
					NOT = { has_country_flag = SOV_paranoia_random_purge_cooldown_from_decision_flag } #Wait 15 days after a purge has been triggered from decision
				}

				if = { limit = { NOT = { check_variable = { SOV_medium_paranoia_days = 0 } } }
		
					log = "[GetYear] [GetMonth] | AI | [Root.GetName] | EAI_purge_debug: medium purge possible medium_paranoia_days=[?SOV_medium_paranoia_days] high_paranoia_days=[?SOV_high_paranoia_days] paranoia_weekly_bucket=[?SOV_paranoia_weekly_bucket]"
				
					if = { limit = { check_variable = { SOV_paranoia_weekly_bucket > 400 } }
					
						log = "SOV_paranoia_weekly_bucket > 400"
					}
			
					if = { limit = { check_variable = { SOV_medium_paranoia_days > SOV_high_paranoia_days } }
					
						log = "SOV_medium_paranoia_days > SOV_high_paranoia_days"
					}
				}
		
				if = { limit = { NOT = { check_variable = { SOV_high_paranoia_days = 0 } } }
		
					log = "[GetYear] [GetMonth] | AI | [Root.GetName] | EAI_purge_debug: great purge possible medium_paranoia_days=[?SOV_medium_paranoia_days] high_paranoia_days=[?SOV_high_paranoia_days] paranoia_weekly_bucket=[?SOV_paranoia_weekly_bucket]"
			
					if = { limit = { check_variable = { SOV_high_paranoia_days > SOV_medium_paranoia_days } }
					
						log = "SOV_high_paranoia_days > SOV_medium_paranoia_days"
					}
					
					if = { limit = { check_variable = { SOV_paranoia_weekly_bucket > 400 } }
					
						log = "SOV_paranoia_weekly_bucket > 400"
					}
				}
			}
		}
	}
}

EAI_mefo_debug = {

	if = { limit = { tag = GER }

		if = { limit = { has_country_flag = GER_mefo_bills_penalty_flag }
			log = "[GetYear] [GetMonth] | AI | [Root.GetName] | EAI_mefo_debug: GER_mefo_bills_penalty_flag"
		}
	
		if = {
			limit = {
				OR = {
					has_dynamic_modifier = { modifier = GER_mefo_bills_modifier }
					has_dynamic_modifier = { modifier = GER_economy_of_conquest_modifier }
				}
			}

			if = { limit = { check_variable = { GER_industrial_consumer_goods_factor > 0.5 } }
			
				log = "GER_industrial_consumer_goods_factor=[?GER_industrial_consumer_goods_factor] GER_monthly_consumer_goods_increase=[?GER_monthly_consumer_goods_increase]"
			}
			
			# GER_industrial_consumer_goods_expected_value
			# GER_industrial_industrial_capacity_factory
			# GER_industrial_industrial_capacity_dockyard
		}
	}
}